/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  PostCreateInput: { // input type
    content?: string | null; // String
    title: string; // String!
  }
  PostOrderByUpdatedAtInput: { // input type
    updatedAt: NexusGenEnums['SortOrder']; // SortOrder!
  }
  UserCreateInput: { // input type
    email: string; // String!
    name?: string | null; // String
    password: string; // String!
    posts?: NexusGenInputs['PostCreateInput'][] | null; // [PostCreateInput!]
  }
  UserUniqueInput: { // input type
    email?: string | null; // String
    id?: number | null; // Int
  }
}

export interface NexusGenEnums {
  SortOrder: "asc" | "desc"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  AuthPayload: { // root type
    token?: string | null; // String
    user?: NexusGenRootTypes['User'] | null; // User
  }
  Mutation: {};
  PageInfo: { // root type
    currentPage: number; // Int!
    hasNextPage: boolean; // Boolean!
    pageCount: number; // Int!
    perPage: number; // Int!
    totalCount: number; // Int!
  }
  Post: { // root type
    content?: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    published: boolean; // Boolean!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    viewCount: number; // Int!
    votes: number; // Int!
  }
  Profile: { // root type
    bio?: string | null; // String
    id: number; // Int!
  }
  Query: {};
  Response: { // root type
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    posts: NexusGenRootTypes['Post'][]; // [Post!]!
  }
  TopInfo: { // root type
    pageCount: number; // Int!
    perPage: number; // Int!
    topPosts: NexusGenRootTypes['Post'][]; // [Post!]!
    totalCount: number; // Int!
  }
  User: { // root type
    email: string; // String!
    id: number; // Int!
    name?: string | null; // String
  }
  _QueryMeta: { // root type
    count?: number | null; // Int
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    token: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  Mutation: { // field return type
    addProfileForUser: NexusGenRootTypes['Profile'] | null; // Profile
    createDraft: NexusGenRootTypes['Post'] | null; // Post
    deletePost: NexusGenRootTypes['Post'] | null; // Post
    incrementPostViewCount: NexusGenRootTypes['Post'] | null; // Post
    signupUser: NexusGenRootTypes['User']; // User!
    togglePublishPost: NexusGenRootTypes['Post'] | null; // Post
    updateProfileForUser: NexusGenRootTypes['User'] | null; // User
    votePost: NexusGenRootTypes['Post'] | null; // Post
  }
  PageInfo: { // field return type
    currentPage: number; // Int!
    hasNextPage: boolean; // Boolean!
    pageCount: number; // Int!
    perPage: number; // Int!
    totalCount: number; // Int!
  }
  Post: { // field return type
    author: NexusGenRootTypes['User'] | null; // User
    content: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    published: boolean; // Boolean!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    viewCount: number; // Int!
    votes: number; // Int!
  }
  Profile: { // field return type
    bio: string | null; // String
    id: number; // Int!
    user: NexusGenRootTypes['User'] | null; // User
  }
  Query: { // field return type
    _allPostsMeta: NexusGenRootTypes['_QueryMeta'] | null; // _QueryMeta
    _allUsersMeta: NexusGenRootTypes['_QueryMeta'] | null; // _QueryMeta
    allPosts: NexusGenRootTypes['Post'][]; // [Post!]!
    allUsers: NexusGenRootTypes['User'][]; // [User!]!
    draftsByUser: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    postById: NexusGenRootTypes['Post'] | null; // Post
    user: NexusGenRootTypes['User'] | null; // User
  }
  Response: { // field return type
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    posts: NexusGenRootTypes['Post'][]; // [Post!]!
  }
  TopInfo: { // field return type
    pageCount: number; // Int!
    perPage: number; // Int!
    topPosts: NexusGenRootTypes['Post'][]; // [Post!]!
    totalCount: number; // Int!
  }
  User: { // field return type
    email: string; // String!
    id: number; // Int!
    name: string | null; // String
    posts: NexusGenRootTypes['Post'][]; // [Post!]!
    profile: NexusGenRootTypes['Profile'] | null; // Profile
  }
  _QueryMeta: { // field return type
    count: number | null; // Int
  }
}

export interface NexusGenFieldTypeNames {
  AuthPayload: { // field return type name
    token: 'String'
    user: 'User'
  }
  Mutation: { // field return type name
    addProfileForUser: 'Profile'
    createDraft: 'Post'
    deletePost: 'Post'
    incrementPostViewCount: 'Post'
    signupUser: 'User'
    togglePublishPost: 'Post'
    updateProfileForUser: 'User'
    votePost: 'Post'
  }
  PageInfo: { // field return type name
    currentPage: 'Int'
    hasNextPage: 'Boolean'
    pageCount: 'Int'
    perPage: 'Int'
    totalCount: 'Int'
  }
  Post: { // field return type name
    author: 'User'
    content: 'String'
    createdAt: 'DateTime'
    id: 'Int'
    published: 'Boolean'
    title: 'String'
    updatedAt: 'DateTime'
    viewCount: 'Int'
    votes: 'Int'
  }
  Profile: { // field return type name
    bio: 'String'
    id: 'Int'
    user: 'User'
  }
  Query: { // field return type name
    _allPostsMeta: '_QueryMeta'
    _allUsersMeta: '_QueryMeta'
    allPosts: 'Post'
    allUsers: 'User'
    draftsByUser: 'Post'
    postById: 'Post'
    user: 'User'
  }
  Response: { // field return type name
    pageInfo: 'PageInfo'
    posts: 'Post'
  }
  TopInfo: { // field return type name
    pageCount: 'Int'
    perPage: 'Int'
    topPosts: 'Post'
    totalCount: 'Int'
  }
  User: { // field return type name
    email: 'String'
    id: 'Int'
    name: 'String'
    posts: 'Post'
    profile: 'Profile'
  }
  _QueryMeta: { // field return type name
    count: 'Int'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addProfileForUser: { // args
      bio?: string | null; // String
      userUniqueInput: NexusGenInputs['UserUniqueInput']; // UserUniqueInput!
    }
    createDraft: { // args
      authorEmail: string; // String!
      data: NexusGenInputs['PostCreateInput']; // PostCreateInput!
    }
    deletePost: { // args
      id: number; // Int!
    }
    incrementPostViewCount: { // args
      id: number; // Int!
    }
    signupUser: { // args
      bio?: string | null; // String
      data: NexusGenInputs['UserCreateInput']; // UserCreateInput!
    }
    togglePublishPost: { // args
      id: number; // Int!
    }
    updateProfileForUser: { // args
      bio?: string | null; // String
      email: string; // String!
    }
    votePost: { // args
      id: number; // Int!
    }
  }
  Query: {
    _allPostsMeta: { // args
      searchString?: string | null; // String
    }
    allPosts: { // args
      orderBy?: NexusGenInputs['PostOrderByUpdatedAtInput'] | null; // PostOrderByUpdatedAtInput
      searchString?: string | null; // String
      skip?: number | null; // Int
      take?: number | null; // Int
    }
    allUsers: { // args
      skip?: number | null; // Int
      take?: number | null; // Int
    }
    draftsByUser: { // args
      userUniqueInput: NexusGenInputs['UserUniqueInput']; // UserUniqueInput!
    }
    postById: { // args
      id?: number | null; // Int
    }
    user: { // args
      id?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}